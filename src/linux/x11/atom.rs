/* 
Copyright (c) 2024  NickelAnge.Studio 
Email               mathieu.grenier@nickelange.studio
Git                 https://github.com/NickelAngeStudio/nswindow

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

use std::ffi::CString;

use crate::linux::x11::Atom;

/// Macro that construct the X11Atoms struct. Since new atoms could be added,
/// this struct is generated by a macro for convenience.
macro_rules! x11_atoms_struct {
    ($atom:ident $(,$atoms:ident)*) => {
        /// Contains needed atoms for X window properties management.
        /// 
        /// Reference(s)
        /// <https://tronche.com/gui/x/xlib/window-information/properties-and-atoms.html>
        #[allow(non_snake_case)]
        #[derive(Debug)]
        pub struct X11Atoms {
            // Remove/unset property
            pub(crate) _NET_WM_STATE_REMOVE : Atom,

            // Add/set property
            pub(crate) _NET_WM_STATE_ADD : Atom,

            // Toggle property
            pub(crate) _NET_WM_STATE_TOGGLE : Atom,

            // List of atoms to use (Filled with atoms name use when calling x11_server_property! macro)
            pub(crate) $atom : Atom,
            $(pub(crate) $atoms : Atom,)*

            /// Used to query atom type
            pub(crate) xa_atom : Atom,
        }

        impl X11Atoms{
            /// Fetch atoms value with display
            pub fn new(display : * mut super::Display) -> X11Atoms {
                #[allow(temporary_cstring_as_ptr)]
                unsafe {        
                    let x11atom = X11Atoms { _NET_WM_STATE_REMOVE : 0, _NET_WM_STATE_ADD : 1, _NET_WM_STATE_TOGGLE : 2,
                    $atom :   super::XInternAtom(display, CString::new(stringify!($atom)).unwrap().as_ptr(), 1),
                    $($atoms :  super::XInternAtom(display, CString::new(stringify!($atoms)).unwrap().as_ptr(), 1),)*
                    xa_atom : 4 };

                    // Make sure that all Atoms have value > 0.
                    assert_ne!(x11atom.$atom, 0, "Atom [{}] value must NOT be 0.", stringify!($atom));

                    // Return X11 Atoms
                    x11atom
                }
            }
        }

        

    }


}



// Construct X11Atoms with needed atoms 
x11_atoms_struct!(_NET_WM_STATE, _NET_WM_STATE_MAXIMIZED_VERT, _NET_WM_STATE_MAXIMIZED_HORZ, _NET_WM_STATE_HIDDEN, _NET_WM_STATE_FULLSCREEN,
    _NET_WM_WINDOW_TYPE, _NET_WM_WINDOW_TYPE_NORMAL, _NET_WM_ALLOWED_ACTIONS, _NET_WM_ACTION_FULLSCREEN,
    _NET_WM_ACTION_MINIMIZE, _NET_WM_ACTION_CHANGE_DESKTOP, _NET_WM_ACTION_CLOSE, _NET_WM_ACTION_ABOVE, _NET_WM_ACTION_BELOW, 
    WM_DELETE_WINDOW, _MOTIF_WM_HINTS
);